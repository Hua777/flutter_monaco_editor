// ignore: avoid_web_libraries_in_flutter
import 'dart:js';

import 'package:flutter_monaco_editor/flutter_monaco_editor.dart';

const monacoLanguagesClickhouseSqlKeyword = [
  // CLICKHOUSE
  'SETTINGS',
  // MYSQL
  'ACCESSIBLE',
  'ADD',
  'ALL',
  'ALTER',
  'ANALYZE',
  'AND',
  'AS',
  'ASC',
  'ASENSITIVE',
  'BEFORE',
  'BETWEEN',
  'BIGINT',
  'BINARY',
  'BLOB',
  'BOTH',
  'BY',
  'CALL',
  'CASCADE',
  'CASE',
  'CHANGE',
  'CHAR',
  'CHARACTER',
  'CHECK',
  'COLLATE',
  'COLUMN',
  'CONDITION',
  'CONSTRAINT',
  'CONTINUE',
  'CONVERT',
  'CREATE',
  'CROSS',
  'CUBE',
  'CUME_DIST',
  'CURRENT_DATE',
  'CURRENT_TIME',
  'CURRENT_TIMESTAMP',
  'CURRENT_USER',
  'CURSOR',
  'DATABASE',
  'DATABASES',
  'DAY_HOUR',
  'DAY_MICROSECOND',
  'DAY_MINUTE',
  'DAY_SECOND',
  'DEC',
  'DECIMAL',
  'DECLARE',
  'DEFAULT',
  'DELAYED',
  'DELETE',
  'DENSE_RANK',
  'DESC',
  'DESCRIBE',
  'DETERMINISTIC',
  'DISTINCT',
  'DISTINCTROW',
  'DIV',
  'DOUBLE',
  'DROP',
  'DUAL',
  'EACH',
  'ELSE',
  'ELSEIF',
  'EMPTY',
  'ENCLOSED',
  'ESCAPED',
  'EXCEPT',
  'EXISTS',
  'EXIT',
  'EXPLAIN',
  'FALSE',
  'FETCH',
  'FIRST_VALUE',
  'FLOAT',
  'FLOAT4',
  'FLOAT8',
  'FOR',
  'FORCE',
  'FOREIGN',
  'FROM',
  'FULLTEXT',
  'FUNCTION',
  'GENERATED',
  'GET',
  'GRANT',
  'GROUP',
  'GROUPING',
  'GROUPS',
  'HAVING',
  'HIGH_PRIORITY',
  'HOUR_MICROSECOND',
  'HOUR_MINUTE',
  'HOUR_SECOND',
  'IF',
  'IGNORE',
  'IN',
  'INDEX',
  'INFILE',
  'INNER',
  'INOUT',
  'INSENSITIVE',
  'INSERT',
  'INT',
  'INT1',
  'INT2',
  'INT3',
  'INT4',
  'INT8',
  'INTEGER',
  'INTERVAL',
  'INTO',
  'IO_AFTER_GTIDS',
  'IO_BEFORE_GTIDS',
  'IS',
  'ITERATE',
  'JOIN',
  'JSON_TABLE',
  'KEY',
  'KEYS',
  'KILL',
  'LAG',
  'LAST_VALUE',
  'LATERAL',
  'LEAD',
  'LEADING',
  'LEAVE',
  'LEFT',
  'LIKE',
  'LIMIT',
  'LINEAR',
  'LINES',
  'LOAD',
  'LOCALTIME',
  'LOCALTIMESTAMP',
  'LOCK',
  'LONG',
  'LONGBLOB',
  'LONGTEXT',
  'LOOP',
  'LOW_PRIORITY',
  'MASTER_BIND',
  'MASTER_SSL_VERIFY_SERVER_CERT',
  'MATCH',
  'MAXVALUE',
  'MEDIUMBLOB',
  'MEDIUMINT',
  'MEDIUMTEXT',
  'MIDDLEINT',
  'MINUTE_MICROSECOND',
  'MINUTE_SECOND',
  'MOD',
  'MODIFIES',
  'NATURAL',
  'NOT',
  'NO_WRITE_TO_BINLOG',
  'NTH_VALUE',
  'NTILE',
  'NULL',
  'NUMERIC',
  'OF',
  'ON',
  'OPTIMIZE',
  'OPTIMIZER_COSTS',
  'OPTION',
  'OPTIONALLY',
  'OR',
  'ORDER',
  'OUT',
  'OUTER',
  'OUTFILE',
  'OVER',
  'PARTITION',
  'PERCENT_RANK',
  'PRECISION',
  'PRIMARY',
  'PROCEDURE',
  'PURGE',
  'RANGE',
  'RANK',
  'READ',
  'READS',
  'READ_WRITE',
  'REAL',
  'RECURSIVE',
  'REFERENCES',
  'REGEXP',
  'RELEASE',
  'RENAME',
  'REPEAT',
  'REPLACE',
  'REQUIRE',
  'RESIGNAL',
  'RESTRICT',
  'RETURN',
  'REVOKE',
  'RIGHT',
  'RLIKE',
  'ROW',
  'ROWS',
  'ROW_NUMBER',
  'SCHEMA',
  'SCHEMAS',
  'SECOND_MICROSECOND',
  'SELECT',
  'SENSITIVE',
  'SEPARATOR',
  'SET',
  'SHOW',
  'SIGNAL',
  'SMALLINT',
  'SPATIAL',
  'SPECIFIC',
  'SQL',
  'SQLEXCEPTION',
  'SQLSTATE',
  'SQLWARNING',
  'SQL_BIG_RESULT',
  'SQL_CALC_FOUND_ROWS',
  'SQL_SMALL_RESULT',
  'SSL',
  'STARTING',
  'STORED',
  'STRAIGHT_JOIN',
  'SYSTEM',
  'TABLE',
  'TERMINATED',
  'THEN',
  'TINYBLOB',
  'TINYINT',
  'TINYTEXT',
  'TO',
  'TRAILING',
  'TRIGGER',
  'TRUE',
  'UNDO',
  'UNION',
  'UNIQUE',
  'UNLOCK',
  'UNSIGNED',
  'UPDATE',
  'USAGE',
  'USE',
  'USING',
  'UTC_DATE',
  'UTC_TIME',
  'UTC_TIMESTAMP',
  'VALUES',
  'VARBINARY',
  'VARCHAR',
  'VARCHARACTER',
  'VARYING',
  'VIRTUAL',
  'WHEN',
  'WHERE',
  'WHILE',
  'WINDOW',
  'WITH',
  'WRITE',
  'XOR',
  'YEAR_MONTH',
  'ZEROFILL',
  'COMMENT',
  'PARTITIONS',
  'PREPARE',
  'REMOVE',
  'REPAIR',
  'RESET',
  'ROLE',
  'STOP',
  'VIEW',
];

const monacoLanguagesClickhouseSqlOperators = [
  'AND',
  'BETWEEN',
  'IN',
  'LIKE',
  'NOT',
  'REGEXP',
  'EXISTS',
  'OF',
  'OR',
  'IS',
  'NULL',
  'INTERSECT',
  'UNION',
  'INNER',
  'JOIN',
  'LEFT',
  'OUTER',
  'RIGHT',
  'FULL',
  'CROSS',
];

const monacoLanguagesClikhouseSQlBuiltinFunctions = [
  // CLICKHOUSE
  'toTypeName',
  'plus',
  'minus',
  'multiply',
  'divide',
  'intDiv',
  'intDivOrZero',
  'modulo',
  'moduloOrZero',
  'positiveModulo',
  'negate',
  'abs',
  'gcd',
  'lcm',
  'max2',
  'min2',
  'multiplyDecimal',
  'divideDecimal',
  'byteSwap',
  'notEmpty',
  'length',
  'emptyArrayUInt8',
  'emptyArrayUInt16',
  'emptyArrayUInt32',
  'emptyArrayUInt64',
  'emptyArrayInt8',
  'emptyArrayInt16',
  'emptyArrayInt32',
  'emptyArrayInt64',
  'emptyArrayFloat32',
  'emptyArrayFloat64',
  'emptyArrayDate',
  'emptyArrayDateTime',
  'emptyArrayString',
  'emptyArrayToSingle',
  'range',
  'array',
  'arrayWithConstant',
  'arrayConcat',
  'arrayElement',
  'has',
  'hasAll',
  'hasAny',
  'hasSubstr',
  'indexOf',
  'arrayCount',
  'countEqual',
  'arrayEnumerate',
  'arrayEnumerateUniq',
  'arrayPopBack',
  'arrayPopFront',
  'arrayPushBack',
  'arrayPushFront',
  'arrayResize',
  'arraySlice',
  'arraySort',
  'arrayPartialSort',
  'arrayReverseSort',
  'arrayPartialReverseSort',
  'arrayUniq',
  'arrayJoin',
  'arrayDifference',
  'arrayDistinct',
  'arrayEnumerateDense',
  'arrayIntersect',
  'arrayJaccardIndex',
  'arrayReduce',
  'arrayReduceInRanges',
  'arrayFold',
  'arrayReverse',
  'reverse',
  'arrayFlatten',
  'arrayCompact',
  'arrayZip',
  'arrayAUC',
  'arrayMap',
  'arrayFilter',
  'arrayFill',
  'arrayReverseFill',
  'arraySplit',
  'arrayReverseSplit',
  'arrayExists',
  'arrayAll',
  'arrayFirst',
  'arrayLast',
  'arrayFirstIndex',
  'arrayLastIndex',
  'arrayMin',
  'arrayMax',
  'arraySum',
  'arrayAvg',
  'arrayCumSum',
  'arrayCumSumNonNegative',
  'arrayProduct',
  'arrayRotateLeft',
  'arrayRotateRight',
  'arrayShiftLeft',
  'arrayShiftRight',
  'arrayRandomSample',
  'arrayJoin',
  'bitAnd',
  'bitOr',
  'bitXor',
  'bitNot',
  'bitShiftLeft',
  'bitShiftRight',
  'bitRotateLeft',
  'bitRotateRight',
  'bitSlice',
  'bitTest',
  'bitTestAll',
  'bitTestAny',
  'bitCount',
  'bitHammingDistance',
  'bitmapToArray',
  'bitmapSubsetInRange',
  'bitmapSubsetLimit',
  'subBitmap',
  'bitmapContains',
  'bitmapHasAny',
  'bitmapHasAll',
  'bitmapCardinality',
  'bitmapMin',
  'bitmapMax',
  'bitmapTransform',
  'bitmapAnd',
  'bitmapOr',
  'bitmapXor',
  'bitmapAndnot',
  'bitmapAndCardinality',
  'bitmapOrCardinality',
  'bitmapXorCardinality',
  'bitmapAndnotCardinality',
  'equals',
  'notEquals',
  'less',
  'greater',
  'lessOrEquals',
  'greaterOrEquals',
  'if',
  'multiIf',
  'greatest',
  'least',
  'makeDate',
  'makeDate32',
  'makeDateTime',
  'makeDateTime64',
  'timestamp',
  'timeZone',
  'serverTimeZone',
  'toTimeZone',
  'timeZoneOf',
  'timeZoneOffset',
  'toYear',
  'toQuarter',
  'toMonth',
  'toDayOfYear',
  'toDayOfMonth',
  'toDayOfWeek',
  'toHour',
  'toMinute',
  'toSecond',
  'toUnixTimestamp',
  'toStartOfYear',
  'toStartOfISOYear',
  'toStartOfQuarter',
  'toStartOfMonth',
  'toLastDayOfMonth',
  'toMonday',
  'toStartOfWeek',
  'toLastDayOfWeek',
  'toStartOfDay',
  'toStartOfHour',
  'toStartOfMinute',
  'toStartOfSecond',
  'toStartOfFiveMinutes',
  'toStartOfTenMinutes',
  'toStartOfFifteenMinutes',
  'toStartOfInterval',
  'toTime',
  'toRelativeYearNum',
  'toRelativeQuarterNum',
  'toRelativeMonthNum',
  'toRelativeWeekNum',
  'toRelativeDayNum',
  'toRelativeHourNum',
  'toRelativeMinuteNum',
  'toRelativeSecondNum',
  'toISOYear',
  'toISOWeek',
  'toWeek',
  'toYearWeek',
  'toDaysSinceYearZero',
  'fromDaysSinceYearZero',
  'fromDaysSinceYearZero32',
  'age',
  'date_diff',
  'date_trunc',
  'date_add',
  'date_sub',
  'timestamp_add',
  'timestamp_sub',
  'addDate',
  'subDate',
  'now',
  'now64',
  'nowInBlock',
  'today',
  'yesterday',
  'timeSlot',
  'toYYYYMM',
  'toYYYYMMDD',
  'toYYYYMMDDhhmmss',
  'YYYYMMDDToDate',
  'YYYYMMDDToDate32',
  'YYYYMMDDhhmmssToDateTime',
  'YYYYMMDDhhmmssToDateTime64',
  'addYears',
  'addQuarters',
  'addMonths',
  'addWeeks',
  'addDays',
  'addHours',
  'addMinutes',
  'addSeconds',
  'addMilliseconds',
  'addMicroseconds',
  'addNanoseconds',
  'subtractYears',
  'subtractQuarters',
  'subtractMonths',
  'subtractWeeks',
  'subtractDays',
  'subtractHours',
  'subtractMinutes',
  'subtractSeconds',
  'subtractMilliseconds',
  'subtractMicroseconds',
  'subtractNanoseconds',
  'timeSlots',
  'formatDateTime',
  'formatDateTimeInJodaSyntax',
  'dateName',
  'monthName',
  'fromUnixTimestamp',
  'fromUnixTimestampInJodaSyntax',
  'toModifiedJulianDay',
  'toModifiedJulianDayOrNull',
  'fromModifiedJulianDay',
  'fromModifiedJulianDayOrNull',
  'toUTCTimestamp',
  'fromUTCTimestamp',
  'dictGet',
  'dictGetOrDefault',
  'dictGetOrNull',
  'dictHas',
  'dictGetHierarchy',
  'dictIsIn',
  'dictGetChildren',
  'dictGetDescendant',
  'dictGetAll',
  'L1Norm',
  'L2Norm',
  'LinfNorm',
  'LpNorm',
  'L1Distance',
  'L2Distance',
  'L2SquaredDistance',
  'LinfDistance',
  'LpDistance',
  'L1Normalize',
  'L2Normalize',
  'LinfNormalize',
  'LpNormalize',
  'cosineDistance',
  'regionToCity',
  'regionToArea',
  'regionToDistrict',
  'regionToCountry',
  'regionToContinent',
  'regionToTopContinent',
  'regionToPopulation',
  'regionIn',
  'regionHierarchy',
  'regionToName',
  'char',
  'hex',
  'unhex',
  'bin',
  'unbin',
  'bitmaskToList',
  'bitmaskToArray',
  'bitPositionsToArray',
  'encrypt',
  'aes_encrypt_mysql',
  'decrypt',
  'tryDecrypt',
  'aes_decrypt_mysql',
  'halfMD5',
  'MD4',
  'MD5',
  'sipHash64',
  'sipHash64Keyed',
  'sipHash128',
  'sipHash128Keyed',
  'sipHash128Reference',
  'sipHash128ReferenceKeyed',
  'cityHash64',
  'intHash32',
  'intHash64',
  'SHA1',
  'SHA224',
  'SHA256',
  'SHA512',
  'SHA512_256',
  'BLAKE3',
  'URLHash',
  'farmFingerprint64',
  'farmHash64',
  'javaHash',
  'javaHashUTF16LE',
  'hiveHash',
  'metroHash64',
  'jumpConsistentHash',
  'murmurHash2_32',
  'murmurHash2_64',
  'gccMurmurHash',
  'kafkaMurmurHash',
  'murmurHash3_32',
  'murmurHash3_64',
  'murmurHash3_128',
  'xxh3',
  'xxHash32, xxHash64',
  'ngramSimHash',
  'ngramSimHashCaseInsensitive',
  'ngramSimHashUTF8',
  'ngramSimHashCaseInsensitiveUTF8',
  'wordShingleSimHash',
  'wordShingleSimHashCaseInsensitive',
  'wordShingleSimHashUTF8',
  'wordShingleSimHashCaseInsensitiveUTF8',
  'ngramMinHash',
  'ngramMinHashCaseInsensitive',
  'ngramMinHashUTF8',
  'ngramMinHashCaseInsensitiveUTF8',
  'ngramMinHashArg',
  'ngramMinHashArgCaseInsensitive',
  'ngramMinHashArgUTF8',
  'ngramMinHashArgCaseInsensitiveUTF8',
  'wordShingleMinHash',
  'wordShingleMinHashCaseInsensitive',
  'wordShingleMinHashUTF8',
  'wordShingleMinHashCaseInsensitiveUTF8',
  'wordShingleMinHashArg',
  'wordShingleMinHashArgCaseInsensitive',
  'wordShingleMinHashArgUTF8',
  'wordShingleMinHashArgCaseInsensitiveUTF8',
  'sqidEncode',
  'sqidDecode',
  'visitParamHas',
  'visitParamExtractUInt',
  'visitParamExtractInt',
  'visitParamExtractFloat',
  'visitParamExtractBool',
  'visitParamExtractRaw',
  'visitParamExtractString',
  'isValidJSON',
  'JSONHas',
  'JSONLength',
  'JSONType',
  'JSONExtractUInt',
  'JSONExtractInt',
  'JSONExtractFloat',
  'JSONExtractBool',
  'JSONExtractString',
  'JSONExtract',
  'JSONExtractKeysAndValues',
  'JSONExtractKeys',
  'JSONExtractRaw',
  'JSONExtractArrayRaw',
  'JSONExtractKeysAndValuesRaw',
  'JSON_EXISTS',
  'JSON_QUERY',
  'JSON_VALUE',
  'toJSONString',
  'JSONArrayLength',
  'jsonMergePatch',
  'and',
  'or',
  'not',
  'xor',
  'map',
  'mapFromArrays',
  'extractKeyValuePairs',
  'extractKeyValuePairsWithEscaping',
  'mapAdd',
  'mapSubtract',
  'mapPopulateSeries',
  'mapContains',
  'mapKeys',
  'mapValues',
  'mapContainsKeyLike',
  'mapExtractKeyLike',
  'mapApply',
  'mapFilter',
  'mapUpdate',
  'mapConcat',
  'mapExists',
  'mapAll',
  'mapSort',
  'mapReverseSort',
  'e',
  'pi',
  'exp',
  'log',
  'exp2',
  'intExp2',
  'log2',
  'exp10',
  'intExp10',
  'log10',
  'sqrt',
  'cbrt',
  'erf',
  'erfc',
  'lgamma',
  'tgamma',
  'sin',
  'cos',
  'tan',
  'asin',
  'acos',
  'atan',
  'pow',
  'cosh',
  'acosh',
  'sinh',
  'asinh',
  'atanh',
  'atan2',
  'hypot',
  'log1p',
  'sign',
  'degrees',
  'radians',
  'factorial',
  'width_bucket',
  'isNull',
  'isNotNull',
  'isZeroOrNull',
  'coalesce',
  'ifNull',
  'nullIf',
  'assumeNotNull',
  'toNullable',
  'empty',
  'notEmpty',
  'length',
  'lengthUTF8',
  'leftPad',
  'leftPadUTF8',
  'rightPad',
  'rightPadUTF8',
  'lower',
  'upper',
  'lowerUTF8',
  'upperUTF8',
  'isValidUTF8',
  'toValidUTF8',
  'repeat',
  'space',
  'reverse',
  'reverseUTF8',
  'concat',
  'concatAssumeInjective',
  'concatWithSeparator',
  'concatWithSeparatorAssumeInjective',
  'substring',
  'substringUTF8',
  'substringIndex',
  'substringIndexUTF8',
  'appendTrailingCharIfAbsent',
  'convertCharset',
  'base58Encode',
  'base58Decode',
  'tryBase58Decode',
  'base64Encode',
  'base64Decode',
  'tryBase64Decode',
  'endsWith',
  'endsWithUTF8',
  'startsWith',
  'startsWithUTF8',
  'trim',
  'trimLeft',
  'trimRight',
  'trimBoth',
  'CRC32',
  'CRC32IEEE',
  'CRC64',
  'normalizeQuery',
  'normalizedQueryHash',
  'normalizeUTF8NFC',
  'normalizeUTF8NFD',
  'normalizeUTF8NFKC',
  'normalizeUTF8NFKD',
  'encodeXMLComponent',
  'decodeXMLComponent',
  'decodeHTMLComponent',
  'extractTextFromHTML',
  'ascii',
  'soundex',
  'punycodeEncode',
  'punycodeDecode',
  'tryPunycodeDecode',
  'idnaEncode',
  'tryIdnaEncode',
  'idnaDecode',
  'byteHammingDistance',
  'stringJaccardIndex',
  'stringJaccardIndexUTF8',
  'editDistance',
  'damerauLevenshteinDistance',
  'jaroSimilarity',
  'jaroWinklerSimilarity',
  'initcap',
  'initcapUTF8',
  'firstLine',
  'toInt8',
  'toInt16',
  'toInt32',
  'toInt64',
  'toInt128',
  'toInt256',
  'toInt8OrZero',
  'toInt16OrZero',
  'toInt32OrZero',
  'toInt64OrZero',
  'toInt128OrZero',
  'toInt256OrZero',
  'toInt8OrNull',
  'toInt16OrNull',
  'toInt32OrNull',
  'toInt64OrNull',
  'toInt128OrNull',
  'toInt256OrNull',
  'toInt8OrDefault',
  'toInt16OrDefault',
  'toInt32OrDefault',
  'toInt64OrDefault',
  'toInt128OrDefault',
  'toInt256OrDefault',
  'toUInt8',
  'toUInt16',
  'toUInt32',
  'toUInt64',
  'toUInt128',
  'toUInt256',
  'toUInt8OrZero',
  'toUInt16OrZero',
  'toUInt32OrZero',
  'toUInt64OrZero',
  'toUInt128OrZero',
  'toUInt256OrZero',
  'toUInt8OrNull',
  'toUInt16OrNull',
  'toUInt32OrNull',
  'toUInt64OrNull',
  'toUInt128OrNull',
  'toUInt256OrNull',
  'toUInt8OrDefault',
  'toUInt16OrDefault',
  'toUInt32OrDefault',
  'toUInt64OrDefault',
  'toUInt128OrDefault',
  'toUInt256OrDefault',
  'toFloat32',
  'toFloat64',
  'toFloat32OrZero',
  'toFloat64OrZero',
  'toFloat32OrNull',
  'toFloat64OrNull',
  'toFloat32OrDefault',
  'toFloat64OrDefault',
  'toDate',
  'toDateOrZero',
  'toDateOrNull',
  'toDateOrDefault',
  'toDateTime',
  'toDateTimeOrZero',
  'toDateTimeOrNull',
  'toDateTimeOrDefault',
  'toDate32',
  'toDate32OrZero',
  'toDate32OrNull',
  'toDate32OrDefault',
  'toDateTime64',
  'toDateTime64OrZero',
  'toDateTime64OrNull',
  'toDateTime64OrDefault',
  'toDecimal32',
  'toDecimal64',
  'toDecimal128',
  'toDecimal256',
  'toDecimal32OrNull',
  'toDecimal64OrNull',
  'toDecimal128OrNull',
  'toDecimal256OrNull',
  'toDecimal32OrDefault',
  'toDecimal64OrDefault',
  'toDecimal128OrDefault',
  'toDecimal256OrDefault',
  'toDecimal32OrZero',
  'toDecimal64OrZero',
  'toDecimal128OrZero',
  'toDecimal256OrZero',
  'toString',
  'toFixedString',
  'toStringCutToZero',
  'toDecimalString',
  'reinterpretAsUInt8',
  'reinterpretAsUInt16',
  'reinterpretAsUInt32',
  'reinterpretAsUInt64',
  'reinterpretAsInt8',
  'reinterpretAsInt16',
  'reinterpretAsInt32',
  'reinterpretAsInt64',
  'reinterpretAsFloat32',
  'reinterpretAsFloat64',
  'reinterpretAsDate',
  'reinterpretAsDateTime',
  'reinterpretAsString',
  'reinterpretAsFixedString',
  'reinterpretAsUUID',
  'reinterpret',
  'CAST',
  'accurateCast',
  'accurateCastOrNull',
  'accurateCastOrDefault',
  'toIntervalYear',
  'toIntervalQuarter',
  'toIntervalMonth',
  'toIntervalWeek',
  'toIntervalDay',
  'toIntervalHour',
  'toIntervalMinute',
  'toIntervalSecond',
  'parseDateTime',
  'parseDateTimeOrZero',
  'parseDateTimeOrNull',
  'parseDateTimeInJodaSyntax',
  'parseDateTimeInJodaSyntaxOrZero',
  'parseDateTimeInJodaSyntaxOrNull',
  'parseDateTimeBestEffort',
  'parseDateTime32BestEffort',
  'parseDateTimeBestEffortUS',
  'parseDateTimeBestEffortOrNull',
  'parseDateTime32BestEffortOrNull',
  'parseDateTimeBestEffortOrZero',
  'parseDateTime32BestEffortOrZero',
  'parseDateTimeBestEffortUSOrNull',
  'parseDateTimeBestEffortUSOrZero',
  'parseDateTime64BestEffort',
  'parseDateTime64BestEffortUS',
  'parseDateTime64BestEffortOrNull',
  'parseDateTime64BestEffortOrZero',
  'parseDateTime64BestEffortUSOrNull',
  'parseDateTime64BestEffortUSOrZero',
  'toLowCardinality',
  'toUnixTimestamp64Milli',
  'toUnixTimestamp64Micro',
  'toUnixTimestamp64Nano',
  'fromUnixTimestamp64Milli',
  'fromUnixTimestamp64Micro',
  'fromUnixTimestamp64Nano',
  'formatRow',
  'formatRowNoNewline',
  'snowflakeToDateTime',
  'snowflakeToDateTime64',
  'dateTimeToSnowflake',
  'dateTime64ToSnowflake',
];

const monacoLanguagesClikhouseSQlTypeKeywords = [
  // CLICKHOUSE
  'Int8', 'Int16', 'Int32', 'Int64', 'Int128', 'Int256', 'UInt8', 'UInt16', 'UInt32', 'UInt64', 'UInt128', 'UInt256',
  'Float32', 'Float64',
  'Decimal32', 'Decimal64', 'Decimal128', 'Decimal256',
  'Bool',
  'String',
  'FixedString',
  'UUID',
  'Date', 'Date32',
  'DateTime', 'DateTime64',
  'Enum', 'LowCardinality',
  'array',
  'AggregateFunction',
  'JSON', 'Tuple', 'Nullable', 'Nested', 'Map',
];

final monacoLanguagesClickhouseSqlEasyCompleterArray = [];

void monacoLanguagesClickhouseSqlInstall({
  Map<String, List<String>>? customerTableAndColumn,
}) {
  MonacoJs.languagesRegister('clickhouse-sql');
  MonacoJs.languagesSetLanguageConfiguration('clickhouse-sql', {
    'comments': {
      'lineComment': '--',
      // 'blockComment': ['/*', '*/']
    },
    'brackets': [
      ['[', ']'],
      ['(', ')']
    ],
    'autoClosingPairs': [
      {'open': '[', 'close': ']'},
      {'open': '(', 'close': ')'},
      {'open': '"', 'close': '"'},
      {'open': "'", 'close': "'"},
      {'open': '`', 'close': '`'}
    ],
    'surroundingPairs': [
      {'open': '[', 'close': ']'},
      {'open': '(', 'close': ')'},
      {'open': '"', 'close': '"'},
      {'open': "'", 'close': "'"},
      {'open': '`', 'close': '`'}
    ]
  });
  MonacoJs.languagesSetMonarchTokensProvider('clickhouse-sql', {
    'defaultToken': '',
    'tokenPostfix': '.sql',
    'ignoreCase': true,
    'brackets': [
      {'open': '[', 'close': ']', 'token': TokenClassConsts.DELIMITER_SQUARE.value},
      {'open': '(', 'close': ')', 'token': TokenClassConsts.DELIMITER_PAREN.value}
    ],
    'keywords': monacoLanguagesClickhouseSqlKeyword,
    'operators': monacoLanguagesClickhouseSqlOperators,
    'builtinFunctions': monacoLanguagesClikhouseSQlBuiltinFunctions,
    'builtinVariables': [],
    'typeKeywords': monacoLanguagesClikhouseSQlTypeKeywords,
    'scopeKeywords': ['CASE', 'END', 'WHEN', 'THEN', 'ELSE'],
    'pseudoColumns': [],
    'tokenizer': {
      'root': [
        {'include': '@comments'},
        {'include': '@whitespace'},
        {'include': '@pseudoColumns'},
        {'include': '@numbers'},
        {'include': '@binaries'},
        {'include': '@strings'},
        {'include': '@complexIdentifiers'},
        {'include': '@scopes'},
        {'include': '@complexDataTypes'},
        [r'[;,.]', TokenClassConsts.DELIMITER.value],
        [r'[\(\)\[\]\{\}]', '@brackets'],
        [
          r'[\w@#$]+',
          {
            'cases': {
              '@scopeKeywords': TokenClassConsts.KEYWORD_SCOPE.value,
              '@operators': TokenClassConsts.OPERATOR_KEYWORD.value,
              '@typeKeywords': TokenClassConsts.TYPE.value,
              '@builtinVariables': TokenClassConsts.VARIABLE.value,
              '@builtinFunctions': TokenClassConsts.PREDEFINED.value,
              '@keywords': TokenClassConsts.KEYWORD.value,
              '@default': TokenClassConsts.IDENTIFIER.value
            }
          }
        ],
        [r'[<>=!%&+\-*/|~^]', TokenClassConsts.OPERATOR_SYMBOL.value]
      ],
      'whitespace': [
        [r'[\s\t\r\n]+', TokenClassConsts.WHITE.value]
      ],
      'comments': [
        [r'--+.*', TokenClassConsts.COMMENT.value],
        [
          r'\/\*',
          {'token': TokenClassConsts.COMMENT_QUOTE.value, 'next': '@comment'}
        ]
      ],
      'comment': [
        [r'[^*/]+', TokenClassConsts.COMMENT.value],
        [
          r'\*\/',
          {'token': TokenClassConsts.COMMENT_QUOTE.value, 'next': '@pop'}
        ],
        [r'.', TokenClassConsts.COMMENT.value]
      ],
      'pseudoColumns': [
        [
          r'[$][A-Za-z_][\w@#$]*',
          {
            'cases': {'@pseudoColumns': TokenClassConsts.PREDEFINED.value, '@default': TokenClassConsts.IDENTIFIER.value}
          }
        ]
      ],
      'numbers': [
        [r'0[xX][0-9a-fA-F]*', TokenClassConsts.NUMBER_HEX.value],
        [r'[$][+-]*\d*(\.\d*)?', TokenClassConsts.NUMBER.value],
        [r'((\d+(\.\d*)?)|(\.\d+))([eE][\-+]?\d+)?', TokenClassConsts.NUMBER_FLOAT.value]
      ],
      'binaries': [
        [
          r"[Xx]'",
          {'token': TokenClassConsts.BINARY.value, 'next': '@binarySingle'}
        ],
        [
          r'[Xx]"',
          {'token': TokenClassConsts.BINARY.value, 'next': '@binaryDouble'}
        ]
      ],
      'binarySingle': [
        [r'\d+', TokenClassConsts.BINARY_ESCAPE.value],
        [r"''", TokenClassConsts.BINARY.value],
        [
          r"'",
          {'token': TokenClassConsts.BINARY.value, 'next': '@pop'}
        ]
      ],
      'binaryDouble': [
        [r'\d+', TokenClassConsts.BINARY_ESCAPE.value],
        [r'""', TokenClassConsts.BINARY.value],
        [
          r'"',
          {'token': TokenClassConsts.BINARY.value, 'next': '@pop'}
        ]
      ],
      'strings': [
        [
          r"'",
          {'token': TokenClassConsts.STRING.value, 'next': '@stringSingle'}
        ],
        [
          r"[Rr]'",
          {'token': TokenClassConsts.STRING.value, 'next': '@stringSingle'}
        ],
        [
          r'"',
          {'token': TokenClassConsts.STRING.value, 'next': '@stringDouble'}
        ],
        [
          r'[Rr]"',
          {'token': TokenClassConsts.STRING.value, 'next': '@stringDouble'}
        ]
      ],
      'stringSingle': [
        [r"[^']+", TokenClassConsts.STRING_ESCAPE.value],
        [r"''", TokenClassConsts.STRING.value],
        [
          r"'",
          {'token': TokenClassConsts.STRING.value, 'next': '@pop'}
        ]
      ],
      'stringDouble': [
        [r'[^"]+', TokenClassConsts.STRING_ESCAPE.value],
        [r'""', TokenClassConsts.STRING.value],
        [
          r'"',
          {'token': TokenClassConsts.STRING.value, 'next': '@pop'}
        ]
      ],
      'complexIdentifiers': [
        [
          r'`',
          {'token': TokenClassConsts.IDENTIFIER_QUOTE.value, 'next': '@quotedIdentifier'}
        ]
      ],
      'quotedIdentifier': [
        [r'[^`]+', TokenClassConsts.IDENTIFIER_QUOTE.value],
        [r'``', TokenClassConsts.IDENTIFIER_QUOTE.value],
        [
          r'`',
          {'token': TokenClassConsts.IDENTIFIER_QUOTE.value, 'next': '@pop'}
        ]
      ],
      'scopes': [],
      'complexDataTypes': []
    }
  });
  MonacoJs.languagesRegisterCompletionItemProvider('clickhouse-sql', (
    model,
    position,
  ) {
    final List<Map> suggestions = [];
    var lineNumber = position['lineNumber'];
    var column = position['column'];
    var textBeforePointer = model.callMethod('getValueInRange', [
      JsObject.jsify({
        'startLineNumber': lineNumber,
        'endLineNumber': lineNumber,
        'startColumn': 0,
        'endColumn': column,
      })
    ]).toString();
    var trimContent = textBeforePointer.trim();
    if (trimContent.isNotEmpty) {
      const keys = [
        monacoLanguagesClikhouseSQlBuiltinFunctions,
        monacoLanguagesClikhouseSQlTypeKeywords,
        monacoLanguagesClickhouseSqlOperators,
      ];
      final keysTypes = [
        MonacoLanguagesCompletionItemKind.Function.value,
        MonacoLanguagesCompletionItemKind.Keyword.value,
        MonacoLanguagesCompletionItemKind.Operator.value,
      ];
      for (int i = 0; i < keys.length; ++i) {
        var keyList = keys[i];
        var keysType = keysTypes[i];
        for (var key in keyList) {
          suggestions.add({
            'label': key,
            'insertText': key,
            'kind': keysType,
          });
        }
      }
      if (customerTableAndColumn != null) {
        customerTableAndColumn.forEach((tableName, columnList) {
          suggestions.add({
            'label': tableName,
            'insertText': tableName,
            'kind': MonacoLanguagesCompletionItemKind.Field,
          });
          for (var columnName in columnList) {
            suggestions.add({
              'label': columnName,
              'insertText': columnName,
              'kind': MonacoLanguagesCompletionItemKind.Field,
            });
          }
        });
      }
    }
    return suggestions;
  });
}
